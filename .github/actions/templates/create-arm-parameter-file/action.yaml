name: "Create ARM parameter file"

inputs: 
  moduleFolderPath:
    description: "The path to the module folder"
    required: true
    default: ""
  registryRootFolder:
    description: "The root folder in the repository"
    required: true
  deploymentConfigFile:
    description: "The deployment config file"
    required: true

runs:
  using: "composite"
  steps:
    - name: Create parameter file
      id: create-param-file
      shell: pwsh
      run: |
        $environment = "staging"
        $customerCode = "scan"
        $deploymentConfigFile = '${{ inputs.registryRootFolder }}${{ inputs.deploymentConfigFile }}'
        $deploymentConfigFile = Get-Content $deploymentConfigFile 
        $config = $deploymentConfigFile -replace '(?m)(?<=^([^"]|"[^"]*")*)//.*' -replace '(?ms)/\*.*?\*/' -replace '<CUSTOMERCODE>', $customerCode -replace '<ENVIRONMENT>', $environment | ConvertFrom-Json

        $paramFile = (Join-Path '${{ inputs.moduleFolderPath }}' "main.parameters.json")
        
        $newJson = [ordered]@{
          '$schema'      = 'https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#'
          contentVersion = "1.0.0.0"
          metadata       = @{template = './main.bicep'}
          parameters     = 
          @{
            'config' = @{'value' = $config }
          }
        }
        
        Set-Content -Path $paramFile -Value (ConvertTo-Json $newJson -Depth 100) -Confirm:$false
        if(Test-Path -Path $paramFile -PathType Leaf){
          write-output "ARM template parameter file has been saved: $paramFile"
          write-output "`n`n==== parameter file contents ====`n`n"
          cat $paramFile
        }
        else{
          write-error "ARM template parameter file has not been saved: $paramFile"
          Throw
        }